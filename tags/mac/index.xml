<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mac on 博客|ZHENG Zi&#39;ou</title>
    <link>https://orianna-zzo.github.io/tags/mac/</link>
    <description>Recent content in Mac on 博客|ZHENG Zi&#39;ou</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 14 Feb 2018 01:49:13 +0800</lastBuildDate>
    
	<atom:link href="https://orianna-zzo.github.io/tags/mac/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>我的Mac入门设置</title>
      <link>https://orianna-zzo.github.io/blog/2018-02/%E6%88%91%E7%9A%84mac%E5%85%A5%E9%97%A8%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Wed, 14 Feb 2018 01:49:13 +0800</pubDate>
      
      <guid>https://orianna-zzo.github.io/blog/2018-02/%E6%88%91%E7%9A%84mac%E5%85%A5%E9%97%A8%E8%AE%BE%E7%BD%AE/</guid>
      <description>序 终于转到有terminal的电脑上了，既然换了Mac OS，需要重新开始找软件。Windows上的软件安装习惯是网上找软件exe，下载安装，基本一个版本能用很久，没有习惯更是懒得经常更新。Linux上倒是有包管理器，但用的不多，只在编程时用过，不过编程包依赖特别重要，一般不会修改，因此基本没有鼓捣过。这次准备换电脑，看着同事非常优雅自如地更新软件，有些羡慕呀，这样才能最大化开源/更新频繁的软件优势。App Store倒是可以随时更新，不过不是所有软件都发布在App Store上，所以这里记录下我需要的配置、计划安装的软件，以及安装方法。如果和我一样刚开始接触mac的小伙伴们，希望这篇能有所帮助。
首先说明下按键符号，如果第一次使用mac可能会有些混，因此这里说明一下：
⌘ - command
⌥ - option
⌃ - control
⇧ - shift
包管理器 Homebrew Mac OS用户大多使用Homebrew作为包管理工具，据说相当于Ubuntu下的apt-get。官网上的一句话介绍是 ⌈The missing package manager for macOS⌋，也就是针对Mac OS所开发的包管理器。
Homebrew官网给出了安装brew的方法，只要复制下面脚本在terminal中粘贴执行就安装成功。
$ /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;  而有了Homebrew后，包的管理和更新就方便了很多。
Homebrew常用指令    指令内容 指令     帮助文档 brew help   安装某包，比如git brew install git   卸载某包，比如git brew uninstall git   强制卸载某包所有版本，比如git brew uninstall git --force   Homebrew本身更新 brew update   查看那些包过期了 brew outdated   将所有包都更新 brew upgrade   指定某包更新，比如git brew upgrade git   锁定某包不让更新，比如git brew pin git   解锁某包可以继续更新，比如git brew unpin git   卸载所有过时的包 brew cleanup   卸载所有过时的包，并显示即将卸载的包 brew cleanup -n   卸载过时的包，比如git brew cleanup git   列出所有brew装的包 brew list   显示软件信息 brew info   显示已安装的包依赖 brew deps --installed   查看brew包下载缓存 brew --cache    具体可查看帮助文档。</description>
    </item>
    
    <item>
      <title>Mac中Git忽略.DS_Store文件</title>
      <link>https://orianna-zzo.github.io/blog/2018-01/mac%E4%B8%ADgit%E5%BF%BD%E7%95%A5.ds_store%E6%96%87%E4%BB%B6/</link>
      <pubDate>Sun, 28 Jan 2018 13:36:28 +0800</pubDate>
      
      <guid>https://orianna-zzo.github.io/blog/2018-01/mac%E4%B8%ADgit%E5%BF%BD%E7%95%A5.ds_store%E6%96%87%E4%BB%B6/</guid>
      <description>Git中多出来的.DS_Store 虽然不是第一次使用mac，也不是第一次在mac上使用git，但对mac实际上非常不熟悉。每次git上传时多出来的.DS_Store文件虽然不清楚具体做什么，但看上去并没什么问题。git一般也是自己一个人单机使用，就算换机也一般是直接换，没有遇到过两个同时使用的时候，上传.DS_Store也就默认都上传了。
但这次用两个mac，一个mac提交了修改，第二个mac想要拉下来时居然遇到了.DS_Store文件被修改过需要提交再merge。什么？我没改过内容呀？所以这个.DS_Store是什么鬼？
.DS_Store是Mac OS用来存储这个文件夹的显示属性的，被作为一种通用的有关显示设置的元数据（比如图标位置等设置）为Finder、Spotlight用。所以在不经意间就会修改这个文件。而文件共享时为了隐私关系将.DS_Store文件删除比较好，因为其中有一些信息在不经意间泄露出去。
Git中处理方案 方案一：项目设置.gitignore 仅针对git的处理最naive的想法就是设置.gitignore文件。
.gitignore文件用于忽略文件，官网介绍在这里，规范如下：
 所有空行或者以注释符号 ＃ 开头的行都会被 git 忽略，空行可以为了可读性分隔段落，# 表明注释。 第一个 / 会匹配路径的根目录，举个栗子，&amp;rdquo;/*.html&amp;rdquo;会匹配&amp;rdquo;index.html&amp;rdquo;，而不是&amp;rdquo;d/index.html&amp;rdquo;。 通配符 * 匹配任意个任意字符，? 匹配一个任意字符。需要注意的是通配符不会匹配文件路径中的 /，举个栗子，&amp;rdquo;d/*.html&amp;rdquo;会匹配&amp;rdquo;d/index.html&amp;rdquo;，但不会匹配&amp;rdquo;d/a/b/c/index.html&amp;rdquo;。 两个连续的星号 ** 有特殊含义：  以 **/ 开头表示匹配所有的文件夹，例如 **/test.md 匹配所有的test.md文件。 以 /** 结尾表示匹配文件夹内所有内容，例如 a/** 匹配文件夹a中所有内容。 连续星号 ** 前后分别被 / 夹住表示匹配0或者多层文件夹，例如 a/**/b 匹配到 a/b 、a/x/b 、a/x/y/b 等。  前缀 ! 的模式表示如果前面匹配到被忽略，则重新添加回来。如果匹配到的父文件夹还是忽略状态，该文件还是保持忽略状态。如果路径名第一个字符为 ! ，则需要在前面增加 \ 进行转义。  对于一些常用的系统、工程文件的.gitignore文件可以参考这个网站进行设置，这里有很多模板。
针对.DS_Store文件，在git工程文件夹中新建.gitignore文件，在文件中设置：
.gitignore **/.DS_Store  对于已经提交的内容，希望git能够忽略，但同时并不会删除本地文件，需要在terminal输入以下命令：
$ git rm -r --cached $file_path  这个方案的优点就是方便、快捷、最容易想到，缺点就是每个git项目都要重复一遍。</description>
    </item>
    
  </channel>
</rss>