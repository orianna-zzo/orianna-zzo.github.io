<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog养成记 on 博客|ZHENG Zi&#39;ou</title>
    <link>https://orianna-zzo.github.io/series/blog%E5%85%BB%E6%88%90%E8%AE%B0/</link>
    <description>Recent content in Blog养成记 on 博客|ZHENG Zi&#39;ou</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 20 Mar 2018 16:46:17 +0800</lastBuildDate>
    
	<atom:link href="https://orianna-zzo.github.io/series/blog%E5%85%BB%E6%88%90%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Blog养成记(7) Hugo中Nested Listed怎么无法显示? —— Markdown小bug合集</title>
      <link>https://orianna-zzo.github.io/blog/2018-03/blog%E5%85%BB%E6%88%90%E8%AE%B07-hugo%E4%B8%ADnested-listed%E6%80%8E%E4%B9%88%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA--markdown%E5%B0%8Fbug%E5%90%88%E9%9B%86/</link>
      <pubDate>Tue, 20 Mar 2018 16:46:17 +0800</pubDate>
      
      <guid>https://orianna-zzo.github.io/blog/2018-03/blog%E5%85%BB%E6%88%90%E8%AE%B07-hugo%E4%B8%ADnested-listed%E6%80%8E%E4%B9%88%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA--markdown%E5%B0%8Fbug%E5%90%88%E9%9B%86/</guid>
      <description>前言 又一次开始折腾Markdown了，不过这一次是因为好好的md文件，在typora中显示的好好的，但在Hugo渲染后格式就不对了，引起我这次探究主要问题在多级列表。考虑到毕竟两个软件的markdown渲染引擎不同，我并没有用到很特别的语法。之前在引用上也碰到了问题，typora中能很好地识别我想要的引用段落，但是Hugo不行。所以这次探究下是哪里出了问题，以及对应的解决方案。
既然已经提到了markdown，在针对问题之前也记录下现在hugo的markdown解析引擎。Markdown解析器有很多，最广泛应用的是GitHub Flavored Markdown的解析器(GFM)，基于CommonMark进行了拓展。Hugo现在默认使用Blackfriday作为Markdown解析引擎，只要日志文件是以.md或者.markdown结尾即可，可以参考这里在配置文件中配置相关参数。除了Blackfriday这个使用最广泛的引擎之外，hugo还支持mmark，mmark是一个基于Blackfriday之上增加了更多拓展语法的解析器。有两种方式可以声明使用mmark，一种是日志文件以.mmark结尾，另一种在日志文件的头部增加markup: mmark声明使用mmark进行解析。
问题列表 以下是问题列表：
 无序列表的多级列表无法显示层级，即应表现为:
  have a try  first second  another     却表现为(空心应为实心)：
  have a try  first second another    有序列表下的无序列表表现为有序列表，即应表现为:
  have a try  first second    却表现为：
  have a try  first second    引用中的代码段无法识别正确结束位置，即应表现为:
  In the quote
 $ This is code fence   Out the quote</description>
    </item>
    
    <item>
      <title>Blog养成记(6) Hugo中的LaTeX渲染</title>
      <link>https://orianna-zzo.github.io/blog/2018-03/blog%E5%85%BB%E6%88%90%E8%AE%B06-hugo%E4%B8%AD%E7%9A%84latex%E6%B8%B2%E6%9F%93/</link>
      <pubDate>Mon, 19 Mar 2018 22:33:45 +0800</pubDate>
      
      <guid>https://orianna-zzo.github.io/blog/2018-03/blog%E5%85%BB%E6%88%90%E8%AE%B06-hugo%E4%B8%AD%E7%9A%84latex%E6%B8%B2%E6%9F%93/</guid>
      <description>前言 Hugo本身并不支持\(\LaTeX\)，但可以通过javascript进行渲染。Hugo官网提供了多种方法，由于这篇博客我决定选择\(\KaTeX\)，而不是MathJax。
安装 在head.html的标签前加上以下语句：
&amp;lt;!-- KaTeX --&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0/katex.min.css&amp;quot; integrity=&amp;quot;sha384-TEMocfGvRuD1rIAacqrknm5BQZ7W7uWitoih+jMNFXQIbNl16bO8OZmylH/Vi/Ei&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0/katex.min.js&amp;quot; integrity=&amp;quot;sha384-jmxIlussZWB7qCuB+PgKG1uLjjxbVVIayPJwi6cG6Zb4YKq0JIw+OMnkkEC7kYCq&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0/contrib/auto-render.min.js&amp;quot; integrity=&amp;quot;sha384-IiI65aU9ZYub2MY9zhtKd1H2ps7xxf+eb2YFG9lX6uRqpXCvBTOidPRCXCrQ++Uc&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; document.addEventListener(&amp;quot;DOMContentLoaded&amp;quot;, function() { renderMathInElement(document.body); }); &amp;lt;/script&amp;gt;  不过0.9.0版本似乎很难链接，还是从这里下载js和css，并放在static/js文件夹中，并将上面代码改为：
&amp;lt;!-- KaTeX --&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/js/katex/katex.min.css&amp;quot; &amp;gt; &amp;lt;script src=&amp;quot;/js/katex/katex.min.js&amp;quot; &amp;gt; &amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;/js/katex/contrib/auto-render.min.js&amp;quot; &amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; document.addEventListener(&amp;quot;DOMContentLoaded&amp;quot;, function() { renderMathInElement(document.body); }); &amp;lt;/script&amp;gt;  使用 尽管KaTeX的github上是如下给出auto-render的默认值的：
[ {left: &amp;quot;$$&amp;quot;, right: &amp;quot;$$&amp;quot;, display: true}, {left: &amp;quot;\\[&amp;quot;, right: &amp;quot;\\]&amp;quot;, display: true}, {left: &amp;quot;\\(&amp;quot;, right: &amp;quot;\\)&amp;quot;, display: false} ]  但实际上，三种标识符都成立，其中前两种将数学公式以block形式展现，第三种以inline形式展现。使用中只需要将left和right放在数学公式两侧即可。</description>
    </item>
    
    <item>
      <title>Blog养成记(5) 要让Github Pages被索引到</title>
      <link>https://orianna-zzo.github.io/blog/2018-01/blog%E5%85%BB%E6%88%90%E8%AE%B05-%E8%A6%81%E8%AE%A9github-pages%E8%A2%AB%E7%B4%A2%E5%BC%95%E5%88%B0/</link>
      <pubDate>Sun, 28 Jan 2018 22:04:23 +0800</pubDate>
      
      <guid>https://orianna-zzo.github.io/blog/2018-01/blog%E5%85%BB%E6%88%90%E8%AE%B05-%E8%A6%81%E8%AE%A9github-pages%E8%A2%AB%E7%B4%A2%E5%BC%95%E5%88%B0/</guid>
      <description>居然都找不到！ 其实Blog我主要是用来做一些记录，更何况忙起来经常不更新，因此尽管有加上一些流量统计的功能，但实际上也不怎么关心到底有多少访问量。在浏览网上其他人的博客布局寻找灵感时，突然看到有博客提到GitHub Pages屏蔽了百度的爬虫，所以百度是搜索不到GitHub Pages上的网页的。
什么？所以百度搜索搜不到我的个人博客？不死心，尝试一下，找得到github、gist主页，但是就是找不到github.io后缀的网页。除了百度之外，我还尝试了Bing、Google，都没有，所以常用的三大搜索引擎都找不到我的博客，小小网站在浩瀚的网络世界中就像是一个孤岛，只有知道url才能达到。突然想到传说中的暗网是否也是加上了反爬，所以大众难以发现？
话说回来，反爬也有反爬的好处，比如有时博客内容特别个人，只是想找个地方发泄一下、记录一下，不被搜索引擎索引到也降低了被他人发现的几率，就像是一个打开的日记本，但是不用担心被家长偷看的感觉。
如何让搜索引擎索引到呢？ 发现流行的搜索引擎居然都找不到博客，那就需要赶紧找解决方法。Google和Bing还不清楚是怎么回事，但网上流传的email回复内容都点明了Github Pages禁止了百度爬虫的爬去，似乎原因是百度爬虫爬得太过于频繁，会严重影响服务器性能。针对百度爬虫的问题，大家找了很多方法。比较早期的有把放在GitHub上的代码同时push到国内的GitCafe上，但GitCafe已经被Coding.net收购，2017年6月前很多方案都是同步推送到Coding.net上，而8月开始免费的Coding.net用户会被强行加入5s等待页面，也会导致爬取失败。自建服务器托管博客、将博客放在Gitlab上或者CDN方法都不在我的选择范围内，因为暂时我还没有购买服务器或者域名的打算，所以决定放弃百度……但不管怎么样Bing和Google还是要设置好的！
居然在robots.txt中设置了屏蔽!!! 我对网络、网站这部分并不熟悉，之前在了解themes里内容时有看见过这么个小小的txt文件，并没有放在心上，但原来各个爬虫爬不到罪魁祸首就在这个txt文件上。
robots.txt在网站的根目录里，文件中明确了爬虫可以爬取以及禁止收录的范围。搜索引擎爬取网站第一个访问的文件就是robots.txt。robots.txt中可以对于不同的搜索引擎机器人设置不同的权限，这里就不赘述了，毕竟也不是我关心的重点^-^。
Hugo在static文件夹中就有一个robots.txt，生成静态网页时就会把这个文件放在网站的根目录下。默认的robots.txt如下所示：
User-agent: * Disallow: /  第二行把所有爬虫都给屏蔽了，只需要把第二行的 / 删去就ok了。
尽管已经修正了robots.txt，但是过了一天多看各个搜索引擎，还是找不到我的博客网站，所以还是要进一步处理。
Google 添加资源 在google搜索页面输入“site:orianna-zzo.github.io”就可以看到这个网页是否被google索引到，如果没被索引到，在搜索结果页面就会直接提示你使用Google Search Console。登录后，如果是首次使用在Search Console中以下界面中选择“网页”类型资源，并将博客完整url填入其中，我填入“https://orianna-zzo.github.io”。注意http或者https，www等最好能完全正确。
如果已经添加过资源，则需要点击下面的红色按钮“添加属性”，然后和上面一样地添加资源即可。
资源添加后，需要验证你对该网站有所有权。Google提供了几种方法，我选择了HTML验证文件上传，只需要根据要求，下载HTML验证文件，把文件放在网站的repository中上传，然后进行验证即可。
查看robots.txt 资源添加后，先查看robots.txt是否设置正确。我就是在这里才发现在这个文档中把所有搜索引擎的爬虫机器人都屏蔽了。
进入资源后，在左侧点击“抓取&amp;gt;robots.txt测试工具”，右边会有显示robots.txt的内容。需要注意的是，robots.txt并不一定是最新版的，看上去这个每天只会更新一次。可以在下方输入需要测试的网址，并点击测试。若显示已允许则说明设置ok。
添加url robots.txt设置成功还是不够的，还是需要手动添加url。在左侧点击“抓取&amp;gt;Google抓取工具”，在右侧金融人机身份验证后，可以将想要添加的url写入输入框，并进行抓取。
状态显示完成，说明该网页已经爬取成功。点击“请求输入索引”，会显示以下选择框：
有两个选项，第一个仅抓取次网址，每个月500次提交机会，第二个抓取次网址及其直接链接，每个月有10次提交机会。提交后，编入了索引，等上一会就可以在google上搜索了！
不过提交次数多就需要进行图片验证，而且如果网站有修改就需要重新提交。鉴于现在内容不多，先都是人肉提交的，如果网页多的话，可以通过站点地图进行提交。
站点地图 在左侧点击“站点地图”，并在右侧点添加/测试站点地图，并添加url，我的是“https://orianna-zzo.github.io/sitemap.xml”。
发现提示有警告，说是网址遭到robots.txt阻止。原来sitemap需要在robots.txt增加配置，于是现在robots.txt如下所示：
User-agent: * Disallow: Sitemap: https://orianna-zzo.github.io/sitemap.xml  要注意的是，如果有网页不想被爬取，不仅需要在robotx.txt中注意增加在Disallow后面，还要注意生成sitemap时不要添加进去。
Bing 相似地，在Bing网站管理登陆、添加网站url。
然后在左侧点击“配置我的网站&amp;gt;Sitemaps”，并在右侧加上sitemap的url，点击提交。
Google基本过一天就能查到，但是Bing我总是很难搜索到，猛然发现上次抓取更新时间还在1-11，已经过了大半个月了，不知道什么时候才能知道效果了。
百度不死心的尝试 百度在这里注册站长管理并添加网站资源，我同样选择添加HTML文件。注意http或者https、www等最好能完全正确。我百度的验证过好几次都没有成功，料想是将https写成了http所以验证出现问题。
在右侧选择“数据监控&amp;gt;Robots”，并点击检测并更新刷新robots设置。
在“数据引入&amp;gt;链接提交”中的自动提交选择sitemap，并提交sitemap地址。
状态转了很久显示抓取失败T^T。
然后选择“数据监控&amp;gt;抓取诊断”，并输入博客网址进行抓取。然后发现，全部都抓取失败了，显示是“拒绝访问”。果然是真的屏蔽了百度爬虫了呀。
Resource资源链接汇总 Google网站管理、Bing网站管理、百度网站管理
版本控制    Version Action Time     1.</description>
    </item>
    
    <item>
      <title>Blog养成记(4) Hugo中增加tags等分类</title>
      <link>https://orianna-zzo.github.io/blog/2018-01/blog%E5%85%BB%E6%88%90%E8%AE%B04-hugo%E4%B8%AD%E5%A2%9E%E5%8A%A0tags%E7%AD%89%E5%88%86%E7%B1%BB/</link>
      <pubDate>Tue, 09 Jan 2018 18:22:25 +0800</pubDate>
      
      <guid>https://orianna-zzo.github.io/blog/2018-01/blog%E5%85%BB%E6%88%90%E8%AE%B04-hugo%E4%B8%AD%E5%A2%9E%E5%8A%A0tags%E7%AD%89%E5%88%86%E7%B1%BB/</guid>
      <description>自定义分类 Hugo是支持用户自定义分类的，这个称为taxonomy，可以来对网页内容进行逻辑划分，详情可以在这里查看。
分类taxonomy有3个概念：
 Taxonomy 分类: 可以用来对内容进行分类的类别 Term 术语: 分类的一个键 Value 值: 分配给这个Term的具体内容  例如我需要增加3个分类，分别是：
 tag：文章标签 topic：文章主题/文章系列 category：文章分类  以tag为例，则对应Taxonomy是tag，Term是具体标签内容比如docker或者hugo，Value是打上这个标签的对应网页。
配置分类 需要在 config.toml 中增加分类。还是这个例子，则需要增加如下内容：
[taxonomies] tag = &amp;quot;tags&amp;quot; series = &amp;quot;series&amp;quot; category = &amp;quot;categories&amp;quot;  而将每个post的头部也相应增加对应的分类，例如这篇的头部就相应为：
date: &amp;quot;2018-01-09T16:22:25+08:00&amp;quot; draft: false title: &amp;quot;Blog养成记(4)增加tags等分类&amp;quot; tags: [&amp;quot;hugo&amp;quot;] series: [&amp;quot;Blog养成记&amp;quot;] categories: [&amp;quot;杂技浅尝&amp;quot;]  当然实际上，Hugo默认会产生 tags 和 categories 的分类，如果只需要这两个，可以不用在 config.toml 中声明就在post头部使用。
分类集合查看 使用分类taxonomy之后，Hugo会使用分类的模板 (taxonomy templates) 来自动生成一个显示所有分类的term术语的网页以及一个显示该术语的所有value内容列表网页。
还是以tag为例：
example.com/tags/ 会列出tags中的所有术语；
example.com/tags/docker 会列出tags标为docker的所有网页列表。
分类排序  分类排序还未正式尝试，无法确认正式效果，还需后面确认后再补充。</description>
    </item>
    
    <item>
      <title>Blog养成记(3) Hugo的语法高亮配置</title>
      <link>https://orianna-zzo.github.io/blog/2018-01/blog%E5%85%BB%E6%88%90%E8%AE%B03-hugo%E7%9A%84%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 09 Jan 2018 17:52:25 +0800</pubDate>
      
      <guid>https://orianna-zzo.github.io/blog/2018-01/blog%E5%85%BB%E6%88%90%E8%AE%B03-hugo%E7%9A%84%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE%E9%85%8D%E7%BD%AE/</guid>
      <description>前言 Hugo官网在这里给出了详细的语法高亮配置说明。
一般有以下3种常见方法：
1. 使用Hugo默认Chroma
2. 使用Pygments
3. 使用CSS
使用Pygments进行高亮 Hugo从0.28版本开始默认使用Chroma来作语法高亮。Chroma使用go编写的，渲染速度很快。 如果需要使用Pygments，需要先安装Pygments，并在网站配置文件中设置一些相关参数。
Pygments安装 我在建立Hugo镜像时已经安装了Pygments，不然需要先安装Pygments。如果在Debian和Ubuntu系统中可以用下面语句安装，其他系统也可参考：
$ sudo apt-get install python3-pygments  Pygments配置 下面是我按官网在 config.toml 中配置的参数：
[highlighting] pygmentsUseClassic = true pygmentsCodeFences = true pygmentsStyle = &amp;quot;autumn&amp;quot;  其中， pygmentsUseClassic=true 说明使用Pygments来进行语法高亮；
pygmentsCodeFences=true 使在code fence中的根据设置的语言标签进行语法高亮；
pygmentsStyle=&amp;quot;autumn&amp;quot; 设置高亮的风格,可以在这里查看各高亮风格，选择最心仪的。
我选择了 autumn，下面是在code fence中的高亮示例：
#!/usr/bin/python3 from engine import RunForrestRun &amp;quot;&amp;quot;&amp;quot;Test code for syntax highlighting!&amp;quot;&amp;quot;&amp;quot; class Foo: def __init__(self, var): self.var = var self.run() def run(self): RunForrestRun() # run along!</description>
    </item>
    
    <item>
      <title>Blog养成记(2) Hugo&#43;Docker在Github上建立Blog</title>
      <link>https://orianna-zzo.github.io/blog/2018-01/blog%E5%85%BB%E6%88%90%E8%AE%B02-hugo-docker%E5%9C%A8github%E4%B8%8A%E5%BB%BA%E7%AB%8Bblog/</link>
      <pubDate>Sun, 07 Jan 2018 11:05:25 +0800</pubDate>
      
      <guid>https://orianna-zzo.github.io/blog/2018-01/blog%E5%85%BB%E6%88%90%E8%AE%B02-hugo-docker%E5%9C%A8github%E4%B8%8A%E5%BB%BA%E7%AB%8Bblog/</guid>
      <description>Introduction 正如上一篇说的，我选择了Hugo作为静态网页生成器。Hugo是一个用go写的静态网页生成器，它被提及最多的优点就是它生成网站的速度快。此外，Hugo的安装配置看上去也并不麻烦，直接在这里选择合适的版本和环境下载对应release版并配置环境变量即可。整体来说非常方便。
在决定使用Hugo之外，我还决定用Docker来做环境配置。因为新买了mac，不愿意弄乱环境，也希望以后能够跨平台使用，方便配置，更重要的是，最近对docker感兴趣，想实践一下。Docker是一个开源的应用容器引擎，可以方便地将不同容器间的环境进行隔离，但又比虚拟机更轻量化，能更快速启动。与Docker相关的内容我会在另一个Docker系列进行详细说明，这里主要还是与建立Blog相关的使用为主。
网上使用Hugo写blog的内容很多，使用docker的也很多，但使用docker来搭建hugo编写环境并不多，我也是在一步步摸索中。那么，就跟着我一起开始尝试吧！
Hugo的docker环境配置 Docker安装 在Mac中可以使用Homebrew进行安装：
$ brew cask install docker  若是Windows或者其他操作系统，可以在这里选择你的操作系统下载相应版本进行安装并配置环境变量。
获得Hugo开发镜像 我在docker hub上查找了下，截止目前并没有官方镜像，都是用户自己建立并上传的镜像。Hugo的Github中的确有建立docker镜像的Dockerfile，但是我试了几次都未成功，最后决定建立自己的Hugo docker镜像，顺便学习下Dockerfile。
直接获得镜像 如果只想获得开发镜像，可以选择从docker hub上下载个镜像，选择还挺多，欢迎下载我建立的docker镜像，在docker hub中只有32MB，只需要在终端中输入下面的命令即可：
$ docker pull orianna/hugo-docker-dev  该镜像可以在docker hub中找到，点这里是在docker hub上的repo。
接下去在终端输入下面这行命令可以查看你现在有的镜像信息：
$ docker images  你可以发现orianna/hugo-docker-dev只有94.9MB大小.
自建镜像 或者，你可以选择自己建立镜像。如果已经获得了Hugo镜像，可以略过这一部分。
我建立Hugo docker的Dockerfile放在Github上，大家可以去参考试试。现在是v0.3版，只有94.9MB大小的镜像，后续随着开发可能会有新的变化。
将所有内容clone到当前目录：
$ git clone https://github.com/orianna-zzo/hugo-docker-dev.git  打开Dockerfile，其中HUGO_VERSION是Hugo官方的发布版本，可以选择你需要的Hugo版本进行修改。在v0.3的Dockerfile中，定义了两个挂载文件夹，一个是/hugo-site用来挂载你的Hugo源码，另一个是static-site用来定义Hugo生成静态网页的输出文件夹。
除了基础的下载Hugo执行文件和pygments高亮外，Dockerfile还定义了每次打开容器都会执行start.sh。该shell脚本只有一个作用，如果在当前文件夹中包含run.sh文件则执行该文件，若不存在则打开一个终端，在该终端内你可以自由尝试hugo命令。run.sh的作用主要是便于不用反复输入常用命令，可将常用命令直接写入其中保持注释状态，使用时只需要将要使用的命令保持正常状态即可。如果你clone了这个repository，在site-sample中包含了一个样例run.sh。
在这个repo的文件夹中打开终端，输入下面命令以建立镜像：
$ docker build -t orianna/hugo-docker-dev:0.3 -t orianna/hugo-docker-dev:latest .  其中-t给这个镜像打上tag。根据docker hub的要求，非官方镜像的镜像名称需要为你的docker-name/镜像名称，:后为该镜像的tag。-t可以有多个。注意不要忘记最后的.，它表示使用该文件夹中除了.dockerignore 中的其他内容作为建立镜像的上下文内容。
接下去你就可以在终端输入下面这行命令来查看镜像信息：
$ docker images  至此，你已经获得了Hugo的docker镜像了。
尝试使用Hugo 假设您clone了上文提到的内容，可以在该项目中使用下面命令启动容器来试用Hugo docker：</description>
    </item>
    
    <item>
      <title>Blog养成记(1) Preface</title>
      <link>https://orianna-zzo.github.io/blog/2018-01/blog%E5%85%BB%E6%88%90%E8%AE%B01-preface/</link>
      <pubDate>Mon, 01 Jan 2018 16:05:25 +0800</pubDate>
      
      <guid>https://orianna-zzo.github.io/blog/2018-01/blog%E5%85%BB%E6%88%90%E8%AE%B01-preface/</guid>
      <description> 初始  养个Blog的想法从很早就有了，但是&amp;hellip;  从本科开始就一直想要一个自己的Blog，一直没有行动。本身我没有记日记的习惯，也没有需求和冲动写下什么，本科虽然有时想记下学下的内容，但笔记就够了，也没写什么技术博客的想法。除了很久之前偶尔在qq空间或者人人po两篇直抒胸臆的文章，也就没有其他了。此外，虽说博客最重要的是内容，但没有一个好的生态环境和前端界面设计，至少对于我来说，没有兴趣花时间在上面，原谅我还是外观主义者不够geek。当初选择qq空间和人人更多的是为了圈子和分享，记录的因素只占了很少的一部分，让我长久在这上面却不会满意，毕竟这两者的整体环境定位更偏大众。原谅我比较俗气。这就和你发邮件选择@qq.com还是@gmail.com或者@outlook.com感觉一样，后者给予更正式化的感觉，作为邮箱基础功能来说并没有实质性区别。对于界面设计，之前流行的CSDN或者博客园都是简洁风，不够美观现代化，但够用、功能强大、社区用户庞大，不过没让我提起兴趣。自建网站却止步于嫌整套网站建立使用Wordpress太重，嗯，还要租用服务器。我觉得我还要承认，当时作为本科生的我，太过局限于学校课堂，并未出去看看，对于网络信息的运用和挖掘也更多停留在看看答案、找找软件、翻翻视频的基础使用上，最多也就查看下算法之类的。
近几年，特别从研究生开始，越来越多的都是自己查找信息，更多地接触了“世界”的信息和知识，拓宽了视野，也明白本科王建明老师所说的“语言定义了你的范围”这句话的含义。非常感谢导师王文敏教授和在北大的研究生生涯，研究生和本科生的学习方式上差别很多，真正开始“去林子里打鸟”，而这个林子也扩展为“世界的林子”。随着自我学习机会和时间愈多，碎片化学习和感想也愈多，加上虽然网上知识丰富，但内容庞杂，过段时间想再查找却需要对这些信息重新筛选略费时，再加上工作后发现个人体悟有些良多，人老了很多回忆开始忘却，想要记录的心情越发迫切，于是又一次萌生个人博客的想法。
难产  选择恐惧症+控制狂的特质决定了我家Blog的难产&amp;hellip;  尽管现在有很多像知乎专栏这样有现代化的界面和良好的用户群的网站可以让人直接在上面写作发布更关心核心内容，但我还是更倾向于选择Github Pages，与Github非常紧密的关系是该倾向性很重要的原因（这对码农来说很有诱惑力），但仔细想想我的主要原因可能还是由于Github Pages中整个界面设计都可以自己定制，我自认控制欲还是挺强的（虽然界面设计是个头疼的问题）。
Github Pages搭建个人博客，使用的是轻量级的静态网页，网上已经有很多教程和方案。其实去年大约10月开始我就已经开始着手搭建基于Jekyll的博客了。选择Jekyll只是因为它是官方推荐的选择，据说可定制化和功能很强大。尽管对前端框架和ruby都不熟，但由于个人固执，并没有选择简单fork一个theme就安心写博客。我看了官方推荐的好多theme，找了很多自己喜欢的设计和模块，根据自己的需求想进行重新设计和拼接。现在看来，当初界面整体设计有些不忍直视，还需要重新设计。那段时间持续了挺久，下班回去都22点多，却还会打开电脑看看怎么整，不过由于前端我是新手中的新手，很多问题需要好久才能解决并实现设想，后面搭着搭着想把中间遇到的问题和解决方案记下来，下次可以再找，也算记录博客的搭建过程，不过可惜只写了提纲以及最开始的安装部分。这在去深圳出差那段忙碌的日子打断之后再没有捡起来。
重建  过去这么久，干脆重新开始吧！  断了这么久，好多都不记得了，看之前的设计也觉很多需要修改，干脆推倒重来。重来这回就从一开始进行记录，希望这次能够顺利养成。
反正都要重新开始，就想选择更合适的静态网站工具。除了Jekyll外，Hexo是国人教程最多的，国外口碑也非常好，看到外国的一句评论说，缺点就是大多数内容都是中文，英文教程少，哈哈。去年的时候网上就已经很多博客写如何从Jekyll转到Hexo了，其中一个原因是Jekyll用的是Ruby，Hexo是基于Node.js，前者要学liquid，要用css预编译学scss或者less，后者要学js，但后者相对而言对程序员友好些，如果不是特别爱折腾会很繁琐，另一个主要原因说是Hexo的编译速度要比Jekyll快很多。不过这次我决定选择另一个Framework，使用Hugo。Hugo是用现在大热的go语言写的，据说编译起来比Hexo还会快很多。
除此之外，由于新买了Macbook Pro，出于不想弄乱mac的环境可以瞎折腾这个考虑，最近一直在研究docker的使用和最佳实践，于是新的环境搭建希望是基于docker的。就这样开始吧！
版本控制    Version Action Time     1.0 Init 2018-01-01   1.1 增加tag和版本控制 2018-01-17    </description>
    </item>
    
  </channel>
</rss>